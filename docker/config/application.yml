server:
  servlet.context-path: /${spring.application.name}
  cdn-uri: /${spring.application.name}/
  port: 8443
  non-secure-port: 8080
  ssl:
    client-auth: WANT
  # Default outbound ssl configuration to the server's ssl configuration.
  # Individual services can override if they want.
  outbound-ssl:
    #key-alias: ${server.ssl.key-alias}
    #key-password: ${server.ssl.key-password}
    key-store: ${server.ssl.key-store}
    key-store-password: ${server.ssl.key-store-password}
    key-store-type: ${server.ssl.key-store-type}
    #key-store-provider: ${server.ssl.key-store-provider}
    trust-store: ${server.ssl.trust-store}
    trust-store-password: ${server.ssl.trust-store-password}
    trust-store-type: ${server.ssl.trust-store-type}
    #trust-store-provider: ${server.ssl.trust-store-provider}
    #protocol: ${server.ssl.protocol:TLS}

  undertow:
    accesslog:
      enabled: true
      dir: '${logDir:./logs}'
      prefix: '${spring.application.name}_access.'
      pattern: '%h %l %u %t "%r" %s %b %D'

management:
  endpoints:
    web:
      # Actuator services show up under the /mgmt context path, and users with either Administrator or JBossAdministrator can access.
      base-path: "/mgmt"
      # Include all actuator endpoints in the web frontend. We'll secure most of them with a default security configuration.
      exposure:
        include: "*"
  # Show details on the health endpoint only when the user is authorized. Otherwise just show simple up/down status.
  endpoint.health.show-details: when-authorized

info:
  build:
    version: "@project.version@"
    groupId: "@project.groupId@"
    artifactId: "@project.artifactId@"

spring:
  security:
    user.password: passwordNotUsed
    datawave:
      # JWTs live for 1 day by default
      jwt.ttl: 86400
      # An issuer DN must always be supplied along with a subject DN
      issuers-required: true
      # Allow users with Administrator or JBossAdministrator roles to access the sensitive actuator endpoints.
      manager-roles: Administrator,JBossAdministrator
      # A single role that must not be present in the proxy chain, or else access will be denied for the user.
      # deniedAccessRole: DeniedRole
      # List of required roles, of which each entity in the proxy chain must have at least one of, or else these roles will be removed from the primary user.
      requiredRoles: 
        - "AuthorizedUser"
        - "AuthorizedServer"
        - "AuthorizedQueryServer"
  rabbitmq:
    host: ${MESSAGING_SERVER_HOSTNAME:localhost}
    publisher-confirm-type: simple
    publisher-confirms: true
    publisher-returns: true
  cloud:
    consul:
      enabled: false
  # Configure jackson mappers so that null properties are not included in the serialized response.
  jackson:
    default-property-include: non_null

hazelcast:
  client:
    clusterName: cache

# The default URI for remote authorization
datawave:
  authorization:
    uri: "https://authorization:8443/authorization/v1/authorize"
  security:
    util:
      subjectDnPattern: "(?:^|,)\\s*OU\\s*=\\s*My Department\\s*(?:,|$)"
      npeOuList: "EXAMPLE_SERVER_OU1,EXAMPLE_SERVER_OU2"
  swagger:
    title: "${spring.application.name} service"
    description: "REST API provided by the ${spring.application.name} service"

swagger:
  doc:
    packages: datawave.microservice

springdoc:
  api-docs:
    path: /apidocs
  show-actuator: true
  writer-with-default-pretty-printer: true
  swagger-ui:
    docExpansion: 'none'
    operationsSorter: 'method'
    tagsSorter: 'alpha'
