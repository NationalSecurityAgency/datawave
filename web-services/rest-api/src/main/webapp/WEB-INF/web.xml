<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="
            http://xmlns.jcp.org/xml/ns/javaee
            http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd">

    <servlet-mapping>
        <servlet-name>javax.ws.rs.core.Application</servlet-name>
        <!--<servlet-name>datawave.webservice.application.DatawaveApplication</servlet-name>-->
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <!--
        Don't automatically scan for and register Providers and JAX-RS classes. Hadoop jars, among others, have annotations
        that will be picked up by scans, but the classes are tied to Jersey. Wildfly uses Jackson by default and the two
        don't play well together.
        TODO: These are deprecated and should be moved to a ServletContainerInitializer
    -->
    <context-param>
        <param-name>resteasy.scan</param-name>
        <param-value>false</param-value>
    </context-param>
    <context-param>
        <param-name>resteasy.scan.resources</param-name>
        <param-value>false</param-value>
    </context-param>
    <context-param>
        <param-name>resteasy.scan.providers</param-name>
        <param-value>false</param-value>
    </context-param>

    <!--
        Tell RestEasy to get form parameters using getParameterMap rather than trying to decode the request body. We need this
        because our logging interceptor reads the request body in order to log the form parameters, and therefore when RestEasy
        gets to attempting to read form parameters the body has already been read from the input stream.
    -->
    <context-param>
        <param-name>resteasy.use.container.form.params</param-name>
        <param-value>true</param-value>
    </context-param>

    <!--
        Tell RestEasy to use the Jackson provider instead of the default JsonBindingProvider, for
        backwards compatibility.
    -->
    <context-param>
        <param-name>resteasy.preferJacksonOverJsonB</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.resources</param-name>
        <param-value>
            <!-- From Common -->
            datawave.configuration.ConfigurationBean,
            datawave.webservice.common.cache.AccumuloTableCacheBean,
            datawave.webservice.common.connection.AccumuloConnectionFactoryBean,
            datawave.webservice.common.audit.AuditBean,
            datawave.webservice.common.health.HealthBean,
            datawave.webservice.query.dashboard.DashboardBean,
            <!-- From Security -->
            datawave.security.cache.CredentialsCacheBean,
            datawave.security.user.UserOperationsBean,
            <!-- From Accumulo -->
            datawave.webservice.operations.admin.TableAdminBean,
            datawave.webservice.operations.admin.UpdateBean,
            datawave.webservice.operations.admin.PermissionsBean,
            datawave.webservice.operations.user.StatsBean,
            datawave.webservice.operations.user.ListUsersBean,
            datawave.webservice.operations.user.ListUserPermissionsBean,
            datawave.webservice.operations.user.ListTablesBean,
            datawave.webservice.operations.user.ListUserAuthorizationsBean,
            datawave.webservice.operations.user.LookupBean,
            <!-- From Query -->
            datawave.webservice.query.runner.QueryExecutorBean,
            datawave.webservice.query.runner.BasicQueryBean,
            datawave.webservice.query.hud.HudBean,
            datawave.webservice.query.metric.QueryMetricsBean,
            datawave.webservice.query.cache.QueryCacheBean,
            datawave.webservice.query.runner.IdTranslatorBean,
            <!-- From CachedResults -->
            datawave.webservice.results.cached.CachedResultsBean,
            <!-- From Atom -->
            datawave.webservice.atom.AtomServiceBean,
            <!-- From Modification -->
            datawave.webservice.modification.ModificationBean,
            datawave.webservice.modification.cache.ModificationCacheBean,
            <!-- From Model -->
            datawave.webservice.query.model.ModelBean,
            <!-- From MapReduce -->
            datawave.webservice.mr.MapReduceBean,
            <!-- From MapReduceStatus -->
            datawave.webservice.mr.status.MapReduceStatusUpdateBean,
            <!-- From dictionary -->
            datawave.webservice.dictionary.DataDictionaryBean,
            datawave.webservice.dictionary.EdgeDictionaryBean
        </param-value>
    </context-param>

    <context-param>
        <param-name>resteasy.providers</param-name>
        <param-value>
            datawave.webservice.common.json.JacksonContextResolver,
            datawave.interceptor.ResponseInterceptor,
            datawave.resteasy.interceptor.ClearQuerySessionIDFilter,
            datawave.resteasy.interceptor.CreateQuerySessionIDFilter,
            datawave.resteasy.interceptor.DatawaveCorsFilter,
            datawave.resteasy.interceptor.LoggingInterceptor,
            datawave.webservice.common.exception.RESTExceptionMapper,
            datawave.webservice.util.ProtostuffMessageBodyWriter,
            datawave.webservice.query.interceptor.QueryMetricsEnrichmentInterceptor,
            datawave.webservice.util.HtmlProviderMessageBodyWriter,
            datawave.webservice.atom.jaxrs.AtomMessageBodyWriter,
            datawave.webservice.result.VoidResponseHtmlMessageBodyWriter,
            datawave.resteasy.util.DateParamConverterProvider,
            datawave.security.authorization.DatawaveUserHtmlMessageBodyWriter,
            org.jboss.resteasy.plugins.interceptors.encoding.GZIPEncodingInterceptor,
            org.jboss.resteasy.plugins.interceptors.encoding.GZIPDecodingInterceptor,
            datawave.security.user.TextMessageBodyWriter
        </param-value>
    </context-param>

    <!-- In order to help clients that can't use Accept headers, set up this mapping.  So, the
         URL /Query/<id>/next will produce the default content type, and /Query/<id>/next.json
         will produce json (and so on for other types). -->
    <context-param>
        <param-name>resteasy.media.type.mappings</param-name>
        <param-value>xml : application/xml, json : application/json, yaml : text/x-yaml, txt : text/plain, proto : application/x-protobuf</param-value>
    </context-param>

    <servlet>
        <servlet-name>Resteasy JSAPI</servlet-name>
        <servlet-class>org.jboss.resteasy.jsapi.JSAPIServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>Resteasy JSAPI</servlet-name>
        <url-pattern>/js_api</url-pattern>
    </servlet-mapping>

    <!--
        Use the custom DATAWAVE authentication mechanism. This mechanism handles the X-ProxiedEntitiesChain/X-ProxiedIssuersChain headers
        and is also set up to handle "trusted header" authentication where a load balancer terminates the SSL session and passes the
        client certificate information along in controlled headers.
    -->
    <login-config>
        <auth-method>DATAWAVE-AUTH</auth-method>
        <realm-name>DATAWAVE Web Services</realm-name>
    </login-config>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>AdminCredentials</web-resource-name>
            <url-pattern>/Security/Admin/Credentials/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>JBossAdministrator</role-name>
            <role-name>Administrator</role-name>
            <role-name>SecurityUser</role-name>
        </auth-constraint>
        <!--
         Define the transport guarantee for this webapp. Note that this value is not substituted at compile
         time, but instead will be substituted at runtime by the container.
        -->
        <user-data-constraint>
            <transport-guarantee>${dw.transport.guarantee}</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>AdminCredentials</web-resource-name>
            <url-pattern>/Security/User/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>AuthorizedUser</role-name>
            <role-name>AuthorizedServer</role-name>
            <!-- A server, NOT proxying for a user, but the server is listed in a group authorizing it to run queries -->
            <role-name>AuthorizedQueryServer</role-name>
        </auth-constraint>
        <!--
         Define the transport guarantee for this webapp. Note that this value is not substituted at compile
         time, but instead will be substituted at runtime by the container.
        -->
        <user-data-constraint>
            <transport-guarantee>${dw.transport.guarantee}</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>UnauthenticatedOps</web-resource-name>
            <description>Allow unauthenticated users to access static resources, Health info, and update MapReduceState.</description>
            <url-pattern>/MapReduceStatus/updateState</url-pattern>
            <url-pattern>/Common/Health/*</url-pattern>
            <url-pattern>/screen.css</url-pattern>
            <url-pattern>/jquery*</url-pattern>
            <url-pattern>/ext/*</url-pattern>
            <url-pattern>/favicon.ico</url-pattern>
        </web-resource-collection>
        <!-- For static resources, there is no transport guarantee. -->
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>OpenUserOps</web-resource-name>
            <description>Allow authenticated, but unauthorized users to flush their own credentials.</description>
            <url-pattern>/Security/User/flushCachedCredentials</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>*</role-name>
        </auth-constraint>
        <!--
         Define the transport guarantee for this webapp. Note that this value is not substituted at compile
         time, but instead will be substituted at runtime by the container.
        -->
        <user-data-constraint>
            <transport-guarantee>${dw.transport.guarantee}</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>HtmlAdaptor</web-resource-name>
            <description>A security config that only allows users with the
                role AuthorizedUser to access the this web application
            </description>
            <url-pattern>/Atom/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>Administrator</role-name>
        </auth-constraint>
        <!--
         Define the transport guarantee for this webapp. Note that this value is not substituted at compile
         time, but instead will be substituted at runtime by the container.
        -->
        <user-data-constraint>
            <transport-guarantee>${dw.transport.guarantee}</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <!--  some browsers, like Firefox, will not send SSL certs on the preflight request.  This breaks CORS
               in those browsers, so we need to open up the OPTIONS calls.  This is only exposing
               the documented endpoints  -->
        <web-resource-collection>
            <web-resource-name>UnauthenticatedOps</web-resource-name>
            <description>Allow unauthenticated users to access OPTIONS calls for CORS preflight</description>
            <url-pattern>/*</url-pattern>
            <http-method>OPTIONS</http-method>
        </web-resource-collection>
        <!-- transport-guarantee of NONE ensures we don't attempt any authentication on this request and don't
             look for a client certificate that won't be there -->
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>CatchAll</web-resource-name>
            <description>Most services use this constraint. Authorized users, or servers not proxying for a user.</description>
            <url-pattern>/*</url-pattern>
            <http-method>GET</http-method>
            <http-method>HEAD</http-method>
            <http-method>POST</http-method>
            <http-method>PUT</http-method>
            <http-method>DELETE</http-method>
            <http-method>CONNECT</http-method>
            <http-method>TRACE</http-method>
        </web-resource-collection>
        <auth-constraint>
            <role-name>AuthorizedUser</role-name>
            <role-name>AuthorizedQueryServer</role-name> <!-- A server, NOT proxying for a user, but the server is listed in a group authorizing it to run queries -->
        </auth-constraint>
        <!--
         Define the transport guarantee for this webapp. Note that this value is not substituted at compile
         time, but instead will be substituted at runtime by the container.
        -->
        <user-data-constraint>
            <transport-guarantee>${dw.transport.guarantee}</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <!-- Declare the security roles we use in security constraints. -->
    <security-role>
        <role-name>SecurityUser</role-name>
    </security-role>

    <security-role>
        <role-name>Administrator</role-name>
    </security-role>

    <security-role>
        <role-name>JBossAdministrator</role-name>
    </security-role>

    <security-role>
        <role-name>AuthorizedUser</role-name>
    </security-role>

    <security-role>
        <role-name>AuthorizedServer</role-name>
    </security-role>

    <security-role>
        <role-name>AuthorizedQueryServer</role-name>
    </security-role>
</web-app>
