<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <bean id="responseObjectFactory" class="datawave.core.query.result.event.DefaultResponseObjectFactory"/>

    <!-- A list of lucene to jexl query functions -->
    <util:list id="allowedQueryFunctions" value-type="datawave.core.query.language.functions.jexl.JexlQueryFunction">
        <bean class="datawave.core.query.language.functions.jexl.IsNull"/>
        <bean class="datawave.core.query.language.functions.jexl.IsNotNull"/>
        <bean class="datawave.core.query.language.functions.jexl.Include"/>
        <bean class="datawave.core.query.language.functions.jexl.Exclude"/>
        <bean class="datawave.core.query.language.functions.jexl.Text"/>
        <bean class="datawave.core.query.language.functions.jexl.GeoFunction"/>
        <bean class="datawave.core.query.language.functions.jexl.Loaded"/>
        <bean class="datawave.core.query.language.functions.jexl.DateFunction"/>
        <bean class="datawave.core.query.language.functions.jexl.OccurrenceFunction"/>
        <bean class="datawave.core.query.language.functions.jexl.MatchesInGroupFunction"/>
        <bean class="datawave.core.query.language.functions.jexl.MatchesInGroupLeft"/>
        <bean class="datawave.core.query.language.functions.jexl.GetAllMatches"/>
        <bean class="datawave.core.query.language.functions.jexl.MatchesAtLeastCountOf"/>
        <bean class="datawave.core.query.language.functions.jexl.TimeFunction"/>
        <bean class="datawave.core.query.language.functions.jexl.Jexl"/>
        <bean class="datawave.core.query.language.functions.jexl.AtomValuesMatchFunction"/>
        <bean class="datawave.core.query.language.functions.jexl.Options"/>
        <bean class="datawave.core.query.language.functions.jexl.Rename"/>
        <bean class="datawave.core.query.language.functions.jexl.Unique"/>
        <bean class="datawave.core.query.language.functions.jexl.GroupBy"/>
        <bean class="datawave.core.query.language.functions.jexl.UniqueByDay"/>
        <bean class="datawave.core.query.language.functions.jexl.UniqueByHour"/>
        <bean class="datawave.core.query.language.functions.jexl.UniqueByMinute"/>
        <bean class="datawave.core.query.language.functions.jexl.NoExpansion"/>
        <bean class="datawave.core.query.language.functions.jexl.Compare"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.Contains"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.CoveredBy"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.Covers"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.Crosses"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.Intersects"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.Overlaps"/>
        <bean class="datawave.core.query.language.functions.jexl.Geowave.Within"/>
        <bean class="datawave.core.query.language.functions.jexl.EvaluationOnly">
            <property name="parser" ref="LuceneToJexlQueryParser"/>
        </bean>
        <bean class="datawave.core.query.language.functions.jexl.ExcerptFields"/>
        <bean class="datawave.core.query.language.functions.jexl.Sum"/>
        <bean class="datawave.core.query.language.functions.jexl.Min"/>
        <bean class="datawave.core.query.language.functions.jexl.Max"/>
        <bean class="datawave.core.query.language.functions.jexl.Average"/>
        <bean class="datawave.core.query.language.functions.jexl.Count"/>
    </util:list>

    <bean id="DatawaveSelectorExtractor" scope="prototype" class="datawave.audit.DatawaveSelectorExtractor" >
        <property name="luceneToJexlQueryParser" ref="LuceneToJexlQueryParser"/>
    </bean>

    <bean id="SplitSelectorExtractorParamDefaultNull" scope="prototype" class="datawave.audit.SplitSelectorExtractor">
        <property name="separatorCharacter">
            <value type="char">\u0000</value>
        </property>
        <property name="separatorParameter" value="delimiter" />
    </bean>

    <bean id="RewriteEdgeQuery" scope="prototype" parent="baseQueryLogic" class="datawave.query.tables.edge.EdgeQueryLogic">
<!--     see the query-core pom.xml for explanation of hardcoding -->
<!--         <property name="tableName" value="${edge.table.name}" /> -->
		<property name="tableName" value="edge" />
        <property name="maxResults" value="25000" />
        <property name="maxWork" value="-1" />
        <property name="dataTypes">
            <list value-type="datawave.data.type.Type">
                <bean class="datawave.data.type.NumberType" />
                <bean class="datawave.data.type.LcNoDiacriticsType" />
            </list>
        </property>
        <property name="regexDataTypes">
            <list value-type="datawave.data.type.Type">
                <bean class="datawave.data.type.NumberType" />
                <bean class="datawave.data.type.LcNoDiacriticsType" />
            </list>
        </property>
        <property name="queryThreads" value="16" />
        <property name="auditType" value="ACTIVE" />
        <property name="logicDescription" value="Edge query" />
        <property name="metadataHelperFactory" ref="metadataHelperFactory" />
        <property name="selectorExtractor" ref="DatawaveSelectorExtractor" />
        <property name="edgeModelFieldsFactory" ref="edgeModelFieldsFactory" />
    </bean>
    
    <!-- 
        Factory method config for creating whatever model we want for the default. 
        Provides a fall-back model in the event that the named query model 'modelName'
        isn't defined in Accumulo for whatever reason...
    -->
    <bean id="edgeModelFieldsFactory" class="datawave.edge.model.DefaultEdgeModelFieldsFactory" scope="singleton"/>
    <bean id="edgeQueryModel" class="datawave.query.model.edge.EdgeQueryModel" factory-method="loadModel" scope="singleton">
        <constructor-arg value="/DATAWAVE_EDGE.xml" />
        <constructor-arg ref="edgeModelFieldsFactory" />
    </bean>

    <bean id="EdgeEventQuery" scope="prototype"  parent="BaseEventQuery" class="datawave.query.tables.edge.DefaultEdgeEventQueryLogic">
        <property name="logicDescription" value="Use results of an EdgeQuery to obtain events that created the edge." />
        <property name="edgeQueryModel" ref="edgeQueryModel" />
        <property name="edgeModelName" value="DATAWAVE_EDGE" />
        <property name="modelTableName" value="DatawaveMetadata" />
        <property name="edgeDictionaryProvider" ref="edgeDictionaryProvider" />
        <property name="edgeModelFieldsFactory" ref="edgeModelFieldsFactory" />
    </bean>

    <bean id="edgeDictionaryProvider" scope="prototype" class="datawave.webservice.edgedictionary.EdgeDictionaryProviderImpl" />

    <bean id="ExtendedEdgeQuery" scope="prototype" parent="RewriteEdgeQuery" class="datawave.query.edge.DefaultExtendedEdgeQueryLogic">
        <property name="edgeQueryModel" ref="edgeQueryModel" />
        <property name="modelTableName" value="DatawaveMetadata" />
        <property name="modelName" value="DATAWAVE_EDGE" />
        <property name="listSelectorExtractor" ref="SplitSelectorExtractorParamDefaultNull" />
        <property name="querySyntaxParsers">
            <map key-type="java.lang.String" value-type="datawave.query.language.parser.QueryParser">
                <entry key="JEXL">
                    <null/>
                </entry>
                <entry key="LIST">
                    <null/>
                </entry>
                <entry key="LIMITED_JEXL">
                    <null/>
                </entry>
                <entry key="LUCENE" value-ref="LuceneToJexlQueryParser" />
            </map>
        </property>
    </bean>

    <bean id="EventQuery" scope="prototype"  parent="BaseEventQuery">
        <property name="logicDescription" value="Event query" />
        <property name="configuredProfiles" >
            <map>
                <entry key="copyFieldEventQuery" value-ref="CopyFieldEventQuery" />
            </map>
        </property>
    </bean>

    <bean id="CopyFieldEventQuery" scope="prototype"  class="datawave.query.config.LookupUUIDTune">
        <property name="primaryToSecondaryFieldMap">
            <map>
                <entry key="MAGIC_COPY">
                    <list>
                        <value>MAGIC</value>
                    </list>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="baseQueryLogic" class="datawave.core.query.logic.BaseQueryLogic" abstract="true" >
	<property name="markingFunctions" ref="markingFunctions" />
	<property name="responseObjectFactory" ref="responseObjectFactory" />
    </bean>
    
    <bean id="BaseEventQuery" parent="baseQueryLogic" scope="prototype" class="datawave.query.tables.ShardQueryLogic" abstract="true">
        <property name="tableName" value="shard" />
        <property name="dateIndexTableName" value="dateIndex" />
        <property name="defaultDateTypeName" value="EVENT"/>
        <property name="metadataTableName" value="DatawaveMetadata" />
        <property name="indexTableName" value="shardIndex" />
        <property name="reverseIndexTableName" value="shardReverseIndex" />
        <property name="metadataHelperFactory" ref="metadataHelperFactory" />
        <property name="dateIndexHelperFactory" ref="dateIndexHelperFactory" />
        <property name="queryThreads" value="5" />
        <property name="fullTableScanEnabled" value="false" />
        <property name="includeDataTypeAsField" value="false" />
        <property name="includeHierarchyFields" value="false" />	<!-- was ${include.hierarchy.fields} -->
        <property name="baseIteratorPriority" value="100" />	<!-- was ${beq.baseIteratorPriority} -->
        <!-- property name="accumuloPassword" value="${accumulo.user.password}" />	 -->
        <property name="collapseUids" value="true" />	<!-- was ${query.collapse.uids} -->
        <property name="useEnrichers" value="true" />
        <property name="contentFieldNames">
            <list value-type="java.lang.String">
                <value>CONTENT</value>
            </list>
        </property>
        <property name="realmSuffixExclusionPatterns" >
            <list value-type="java.lang.String">
                <value>&lt;.*&gt;$</value>
            </list>
        </property>
        <property name="minimumSelectivity" value=".2" />
        <property name="enricherClassNames">
            <list value-type="java.lang.String">
                <value>datawave.query.enrich.DatawaveTermFrequencyEnricher</value>
            </list>
        </property>
        <property name="useFilters" value="false" />
        <property name="filterClassNames" value=""/>

        <property name="auditType" value="ACTIVE" />
        <property name="logicDescription" value="Event query with rewritten logic" />
        <!-- The max number of terms BEFORE all expansions -->
        <property name="initialMaxTermThreshold" value="10" />	<!-- was ${beq.initialMaxTermThreshold} -->
        <property name="intermediateMaxTermThreshold" value="10" />
        <property name="indexedMaxTermThreshold" value="10" />
        <!-- The max number of terms AFTER all expansions -->
        <property name="finalMaxTermThreshold" value="10" />	<!-- was ${beq.finalMaxTermThreshold} -->
        <!-- The max query depth -->
        <property name="maxDepthThreshold" value="10" />	<!-- was ${beq.maxDepthThreshold} -->
        <!-- The max unfielded (_ANYFIELD_) expansion per term -->
        <property name="maxUnfieldedExpansionThreshold" value="20" />	<!-- was ${beq.unfieldedExpansionThreshold} -->
        <!-- The max value (regex or range) expansion -->
        <property name="maxValueExpansionThreshold" value="20" />	<!-- was ${beq.valueExpansionThreshold} -->
        <!-- The max value or list expansion for a single field before using an ivarator -->
        <property name="maxOrExpansionThreshold" value="20" />	<!-- was ${beq.orExpansionThreshold} -->
        <!-- The max value or list expansion for a single field using an FST ivarator -->
        <property name="maxOrExpansionFstThreshold" value="20" />	<!-- was ${beq.orExpansionFstThreshold} -->
        <property name="hdfsSiteConfigURLs" value="" />	<!--  was ${hdfs.site.config.urls} -->
        <property name="ivaratorCacheDirConfigs" ref="IvaratorCacheDirConfigs" />	<!-- was ${ivarator.cache.dir.config} -->
        <property name="ivaratorCacheBufferSize" value="10000" />
        <property name="ivaratorCacheScanPersistThreshold" value="100000" />
        <!-- property name="eventQueryDataDecoratorTransformer" ref="EventQueryDataDecoratorTransformer" />	 -->
        <property name="modelTableName" value="DatawaveMetadata" />
        <property name="modelName" value="DATAWAVE" />
        <property name="querySyntaxParsers">
            <map key-type="java.lang.String" value-type="datawave.query.language.parser.QueryParser">
                <entry key="JEXL">
                    <null/>
                </entry>
                <entry key="LUCENE" value-ref="LuceneToJexlQueryParser" />
                <entry key="LUCENE-UUID" value-ref="LuceneToJexlUUIDQueryParser" />
                <!--<entry key="TOKENIZED-LUCENE" value-ref="TokenizedLuceneToJexlQueryParser" />-->
                <!-- JEXL is the default Jexl query syntax -->
            </map>
        </property>
        <property name="queryPlanner" ref="DefaultQueryPlanner" />
        <!--<property name="queryMacroFunction" ref="queryMacroFunction" />-->
        <property name="markingFunctions" ref="markingFunctions" />
        <property name="sortGeoWaveQueryRanges" value="true" />
        <property name="numRangesToBuffer" value="15" />
        <property name="rangeBufferTimeoutMillis" value="15000" />
        <property name="rangeBufferPollMillis" value="100" />
        <property name="evaluationOnlyFields" value="_ANYFIELD_" />
        <!--   variables that control when a seek is issued     -->
        <property name="fiFieldSeek" value="-1" />
        <property name="fiNextSeek" value="-1" />
        <property name="eventFieldSeek" value="3" />
        <property name="eventNextSeek" value="-1" />
        <property name="tfFieldSeek" value="-1" />
        <property name="tfNextSeek" value="-1" />
        <!--    control when to log warnings for long aggregations    -->
        <property name="docAggregationThresholdMs" value="-1" />
        <property name="tfAggregationThresholdMs" value="-1" />
        <!--   enable per-tablet pruning of certain query options     -->
        <property name="pruneQueryOptions" value="false" />
        <property name="rebuildDatatypeFilter" value="true" />
        <property name="rebuildDatatypeFilterPerShard" value="false" />
        <property name="reduceIngestTypes" value="true"/>
        <property name="reduceIngestTypesPerShard" value="true"/>
        <property name="reduceQueryFields" value="false" />
        <property name="reduceQueryFieldsPerShard" value="false" />
        <property name="reduceTypeMetadata" value="false" />
        <property name="reduceTypeMetadataPerShard" value="false" />
        <!--    should the query prune fields by ingest type    -->
        <property name="pruneQueryByIngestTypes" value="false" />
        <!--   should the range stream also generate field and term counts    -->
        <property name="useFieldCounts" value="true" />
        <property name="useTermCounts" value="true" />
        <property name="sortQueryBeforeGlobalIndex" value="true" />
        <property name="sortQueryByCounts" value="true" />
    </bean>

    <bean id="TLDEventQuery" scope="prototype" parent="BaseEventQuery" class="datawave.query.tables.TLDQueryLogic">
        <property name="collapseUids" value="false"/>
        <property name="indexFilteringClassNames">
            <list value-type="java.lang.String">
                <value>datawave.query.function.NormalizedVersionPredicate</value>
            </list>
        </property>
    </bean>

    <bean id="FacetedQuery" parent="BaseEventQuery" scope="prototype" class="datawave.query.tables.facets.FacetedQueryLogic">
        <property name="auditType" value="NONE" />
        <property name="logicDescription" value="Faceted search over indexed fields, returning aggregate counts for field values" />
        <property name="facetedSearchType" value="FIELD_VALUE_FACETS" />
        <property name="facetTableName" value="${table.name.facet}" />
        <property name="facetMetadataTableName" value="${table.name.facet.metadata}" />
        <property name="facetHashTableName" value="${table.name.facet.hashes}" />
        <property name="maximumFacetGrouping" value="200" />
        <property name="minimumFacet" value="1" />
        <property name="streaming" value="true" />
        <property name="querySyntaxParsers">
            <map key-type="java.lang.String" value-type="datawave.query.language.parser.QueryParser">
                <entry key="JEXL">
                    <null/>
                </entry>
                <entry key="LUCENE">
                    <bean class="datawave.core.query.language.parser.jexl.LuceneToJexlQueryParser" />
                </entry>
                <entry key="LUCENE-UUID" value-ref="LuceneToJexlUUIDQueryParser" />
            </map>
        </property>
    </bean>

    <util:list id="IvaratorCacheDirConfigs">
        <bean class="datawave.query.iterator.ivarator.IvaratorCacheDirConfig">
            <constructor-arg value="file:///tmp/IvaratorCache" />
        </bean>
    </util:list>

    <bean id="LuceneToJexlQueryParser" scope="prototype" class="datawave.core.query.language.parser.jexl.LuceneToJexlQueryParser">
         <property name="allowedFunctions" ref="allowedQueryFunctions"/>
    </bean>
    
    <bean id="LuceneToJexlUUIDQueryParser" scope="prototype" class="datawave.core.query.language.parser.jexl.LuceneToJexlUUIDQueryParser">
        <property name="uuidTypes" ref="UUIDTypeList" />
        <property name="allowedFunctions" ref="allowedQueryFunctions"/>
    </bean>
    <util:list id="UUIDTypeList" value-type="datawave.core.query.data.UUIDType">

    </util:list>

    <!--<bean id="TokenizedLuceneToJexlQueryParser" scope="prototype" class="datawave.core.query.language.parser.jexl.LuceneToJexlQueryParser">-->
        <!--<property name="tokenizeUnfieldedQueries" value="true" />-->
        <!--<property name="skipTokenizeUnfieldedFields" ref="skipTokenizeFields"/>-->
        <!--<property name="tokenizedFields" ref="tokenizeFields"/>-->
        <!--<property name="allowedFunctions" ref="allowedQueryFunctions"/>-->
    <!--</bean>-->

    <util:list id="pushdownRegexPatterns" value-type="java.lang.String">
        <value>[.?*]+[0-9a-zA-Z]{0,2}</value>
        <value>[0-9a-zA-Z]{0,2}[.?*]+</value>
    </util:list>

    <util:list id="transformRuleList" value-type="datawave.query.planner.rules.NodeTransformRule">
        <bean scope="prototype" class="datawave.query.planner.rules.RegexPushdownTransformRule">
            <property name="regexPatterns" ref="pushdownRegexPatterns"/>
        </bean>
    </util:list>

    <bean id="DefaultQueryPlanner" scope="prototype" class="datawave.query.planner.DefaultQueryPlanner" >
        <property name="transformRules" ref="transformRuleList" />
        <property name="visitorManager" ref="TimedVisitorManager"/>
    </bean>

    <bean id="TimedVisitorManager" scope="prototype" class="datawave.query.planner.TimedVisitorManager">
        <property name="debugEnabled" value="false"/>
        <property name="validateAst" value="false"/>
        <property name="validator" ref="AstValidator"/>
    </bean>

    <bean id="AstValidator" scope="prototype" class="datawave.core.query.jexl.visitors.validate.ASTValidator">
        <property name="validateLineage" value="true"/>
        <property name="validateFlatten" value="true"/>
        <property name="validateJunctions" value="true"/>
        <property name="validateReferenceExpressions" value="true"/>
        <property name="validateQueryPropertyMarkers" value="true"/>
    </bean>

    <util:list id="RemoteUserServices" value-type="datawave.security.authorization.UserOperations">
    </util:list>
</beans>
