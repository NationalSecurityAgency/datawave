/* Generated By:JavaCC: Do not edit this line. AccumuloSyntaxParserTokenManager.java */
package datawave.query.language.parser.lucene;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

public class AccumuloSyntaxParserTokenManager implements AcumuloSyntaxParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_2(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x100000L) != 0L)
                    return 71;
                if ((active0 & 0xe000L) != 0L) {
                    jjmatchedKind = 22;
                    return 71;
                }
                return -1;
            case 1:
                if ((active0 & 0x4000L) != 0L)
                    return 71;
                if ((active0 & 0xa000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 1;
                    return 71;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_2(int pos, long active0) {
        return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_2(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_2(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 40:
                return jjStopAtPos(0, 17);
            case 41:
                return jjStopAtPos(0, 18);
            case 58:
                return jjStopAtPos(0, 19);
            case 91:
                return jjStopAtPos(0, 25);
            case 94:
                return jjStartNfaWithStates_2(0, 20, 71);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_2(0x2000L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_2(0x8000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_2(0x4000L);
            case 123:
                return jjStopAtPos(0, 26);
            default:
                return jjMoveNfa_2(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(0, active0);
            return 1;
        }
        switch (curChar) {
            case 78:
            case 110:
                return jjMoveStringLiteralDfa2_2(active0, 0x2000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa2_2(active0, 0x8000L);
            case 82:
            case 114:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_2(1, 14, 71);
                break;
            default:
                break;
        }
        return jjStartNfa_2(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_2(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_2(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(1, active0);
            return 2;
        }
        switch (curChar) {
            case 68:
            case 100:
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_2(2, 13, 71);
                break;
            case 84:
            case 116:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_2(2, 15, 71);
                break;
            default:
                break;
        }
        return jjStartNfa_2(1, active0);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {0x1L, 0x0L, 0x0L, 0x0L};
    static final long[] jjbitVec1 = {0xfffefffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec3 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec4 = {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};

    private final int jjMoveNfa_2(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 71;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xfbff7cf2ffffd9ffL & l) != 0L) {
                                if (kind > 22)
                                    kind = 22;
                                jjCheckNAddTwoStates(58, 59);
                            } else if ((0x100002600L & l) != 0L) {
                                if (kind > 12)
                                    kind = 12;
                            } else if (curChar == 47)
                                jjCheckNAddStates(0, 2);
                            else if (curChar == 34)
                                jjCheckNAddStates(3, 5);
                            else if (curChar == 35)
                                jjCheckNAddTwoStates(2, 3);
                            break;
                        case 71:
                        case 58:
                            if ((0xfbff7cf2ffffd9ffL & l) == 0L)
                                break;
                            if (kind > 22)
                                kind = 22;
                            jjCheckNAddTwoStates(58, 59);
                            break;
                        case 1:
                            if (curChar == 35)
                                jjCheckNAddTwoStates(2, 3);
                            break;
                        case 2:
                            if ((0xfbff7cf2ffffd9ffL & l) != 0L)
                                jjCheckNAddStates(6, 8);
                            break;
                        case 4:
                            jjCheckNAddStates(6, 8);
                            break;
                        case 5:
                            if (curChar == 40)
                                jjAddStates(9, 12);
                            break;
                        case 6:
                        case 7:
                            if (curChar == 34)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 9:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 10:
                            if (curChar == 34)
                                jjCheckNAddStates(16, 18);
                            break;
                        case 11:
                            if (curChar == 44)
                                jjCheckNAddStates(19, 23);
                            break;
                        case 12:
                            if ((0x100002600L & l) != 0L)
                                jjCheckNAddStates(19, 23);
                            break;
                        case 13:
                        case 14:
                            if (curChar == 34)
                                jjCheckNAddStates(24, 26);
                            break;
                        case 16:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddStates(24, 26);
                            break;
                        case 17:
                            if ((0xffffec7affffffffL & l) != 0L)
                                jjCheckNAddStates(27, 32);
                            break;
                        case 18:
                            if ((0xffffecffffffffffL & l) != 0L)
                                jjCheckNAddStates(33, 35);
                            break;
                        case 19:
                            if ((0xffffec7affffffffL & l) != 0L)
                                jjCheckNAddStates(16, 18);
                            break;
                        case 20:
                            if (curChar == 41 && kind > 16)
                                kind = 16;
                            break;
                        case 21:
                            if ((0x100002600L & l) != 0L)
                                jjCheckNAddStates(36, 39);
                            break;
                        case 22:
                            if ((0x100002600L & l) != 0L)
                                jjCheckNAddTwoStates(22, 11);
                            break;
                        case 23:
                            if ((0x100002600L & l) != 0L)
                                jjCheckNAddTwoStates(23, 20);
                            break;
                        case 25:
                            jjCheckNAddStates(33, 35);
                            break;
                        case 26:
                            jjCheckNAddStates(16, 18);
                            break;
                        case 28:
                            if (curChar == 39)
                                jjCheckNAddStates(40, 44);
                            break;
                        case 29:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(29, 30);
                            break;
                        case 31:
                            if (curChar == 39)
                                jjCheckNAddTwoStates(29, 30);
                            break;
                        case 32:
                        case 38:
                            if (curChar == 39)
                                jjCheckNAddStates(16, 18);
                            break;
                        case 34:
                            if (curChar == 39)
                                jjCheckNAddStates(45, 47);
                            break;
                        case 36:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddStates(45, 47);
                            break;
                        case 37:
                        case 52:
                            jjCheckNAdd(38);
                            break;
                        case 39:
                            if ((0xffffec7affffffffL & l) != 0L)
                                jjCheckNAddStates(48, 53);
                            break;
                        case 40:
                            if ((0xffffecffffffffffL & l) != 0L)
                                jjCheckNAddStates(54, 56);
                            break;
                        case 42:
                            jjCheckNAddStates(54, 56);
                            break;
                        case 44:
                            if (curChar == 39)
                                jjCheckNAddStates(57, 61);
                            break;
                        case 45:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(45, 46);
                            break;
                        case 47:
                            if (curChar == 39)
                                jjCheckNAddTwoStates(45, 46);
                            break;
                        case 49:
                            if (curChar == 39)
                                jjCheckNAddStates(62, 64);
                            break;
                        case 51:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddStates(62, 64);
                            break;
                        case 53:
                            if (curChar == 34)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 54:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 56:
                            jjCheckNAddStates(3, 5);
                            break;
                        case 57:
                            if (curChar == 34 && kind > 21)
                                kind = 21;
                            break;
                        case 60:
                            if (kind > 22)
                                kind = 22;
                            jjCheckNAddTwoStates(58, 59);
                            break;
                        case 63:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjAddStates(65, 66);
                            break;
                        case 64:
                            if (curChar == 46)
                                jjCheckNAdd(65);
                            break;
                        case 65:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjCheckNAdd(65);
                            break;
                        case 66:
                        case 68:
                            if (curChar == 47)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 67:
                            if ((0xffff7fffffffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 70:
                            if (curChar == 47 && kind > 24)
                                kind = 24;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x97ffffffc7ffffffL & l) != 0L) {
                                if (kind > 22)
                                    kind = 22;
                                jjCheckNAddTwoStates(58, 59);
                            } else if (curChar == 126) {
                                if (kind > 23)
                                    kind = 23;
                                jjstateSet[jjnewStateCnt++] = 63;
                            } else if (curChar == 92)
                                jjCheckNAdd(60);
                            break;
                        case 71:
                            if ((0x97ffffffc7ffffffL & l) != 0L) {
                                if (kind > 22)
                                    kind = 22;
                                jjCheckNAddTwoStates(58, 59);
                            } else if (curChar == 92)
                                jjCheckNAddTwoStates(60, 60);
                            break;
                        case 2:
                            if ((0x97ffffffc7ffffffL & l) != 0L)
                                jjCheckNAddStates(6, 8);
                            break;
                        case 3:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 4:
                            jjCheckNAddStates(6, 8);
                            break;
                        case 8:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 9:
                            jjCheckNAddStates(13, 15);
                            break;
                        case 15:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 16:
                            jjCheckNAddStates(24, 26);
                            break;
                        case 17:
                            jjCheckNAddStates(27, 32);
                            break;
                        case 18:
                        case 25:
                            jjCheckNAddStates(33, 35);
                            break;
                        case 19:
                        case 26:
                            jjCheckNAddStates(16, 18);
                            break;
                        case 24:
                        case 27:
                            if (curChar == 92)
                                jjCheckNAddTwoStates(25, 26);
                            break;
                        case 29:
                            jjAddStates(67, 68);
                            break;
                        case 30:
                            if (curChar == 92)
                                jjAddStates(69, 70);
                            break;
                        case 33:
                        case 48:
                            if (curChar == 92)
                                jjCheckNAdd(32);
                            break;
                        case 35:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 34;
                            break;
                        case 36:
                            jjAddStates(45, 47);
                            break;
                        case 37:
                        case 52:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAdd(38);
                            break;
                        case 39:
                            jjCheckNAddStates(48, 53);
                            break;
                        case 40:
                        case 42:
                            jjCheckNAddStates(54, 56);
                            break;
                        case 41:
                        case 43:
                            if (curChar == 92)
                                jjCheckNAddTwoStates(42, 26);
                            break;
                        case 45:
                            jjAddStates(71, 72);
                            break;
                        case 46:
                            if (curChar == 92)
                                jjAddStates(73, 74);
                            break;
                        case 50:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 49;
                            break;
                        case 51:
                            jjAddStates(62, 64);
                            break;
                        case 54:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 55:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 56;
                            break;
                        case 56:
                            jjCheckNAddStates(3, 5);
                            break;
                        case 58:
                            if ((0x97ffffffc7ffffffL & l) == 0L)
                                break;
                            if (kind > 22)
                                kind = 22;
                            jjCheckNAddTwoStates(58, 59);
                            break;
                        case 59:
                            if (curChar == 92)
                                jjCheckNAddTwoStates(60, 60);
                            break;
                        case 60:
                            if (kind > 22)
                                kind = 22;
                            jjCheckNAddTwoStates(58, 59);
                            break;
                        case 61:
                            if (curChar == 92)
                                jjCheckNAdd(60);
                            break;
                        case 62:
                            if (curChar != 126)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjstateSet[jjnewStateCnt++] = 63;
                            break;
                        case 67:
                            jjAddStates(0, 2);
                            break;
                        case 69:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 68;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                if (kind > 12)
                                    kind = 12;
                            }
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 22)
                                    kind = 22;
                                jjCheckNAddTwoStates(58, 59);
                            }
                            break;
                        case 71:
                        case 58:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 22)
                                kind = 22;
                            jjCheckNAddTwoStates(58, 59);
                            break;
                        case 2:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(6, 8);
                            break;
                        case 4:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(6, 8);
                            break;
                        case 9:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(13, 15);
                            break;
                        case 12:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(19, 23);
                            break;
                        case 16:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(24, 26);
                            break;
                        case 17:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(27, 32);
                            break;
                        case 18:
                        case 25:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(33, 35);
                            break;
                        case 19:
                        case 26:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(16, 18);
                            break;
                        case 21:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(36, 39);
                            break;
                        case 22:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(22, 11);
                            break;
                        case 23:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(23, 20);
                            break;
                        case 29:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjAddStates(67, 68);
                            break;
                        case 36:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjAddStates(45, 47);
                            break;
                        case 37:
                        case 52:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAdd(38);
                            break;
                        case 39:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(48, 53);
                            break;
                        case 40:
                        case 42:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(54, 56);
                            break;
                        case 45:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjAddStates(71, 72);
                            break;
                        case 51:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjAddStates(62, 64);
                            break;
                        case 54:
                        case 56:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(3, 5);
                            break;
                        case 60:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 22)
                                kind = 22;
                            jjCheckNAddTwoStates(58, 59);
                            break;
                        case 67:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_0() {
        return jjMoveNfa_0(0, 0);
    }

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjAddStates(75, 76);
                            break;
                        case 1:
                            if (curChar == 46)
                                jjCheckNAdd(2);
                            break;
                        case 2:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAdd(2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x10000000L) != 0L) {
                    jjmatchedKind = 32;
                    return 6;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_1(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_1(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 93:
                return jjStopAtPos(0, 29);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa1_1(0x10000000L);
            case 125:
                return jjStopAtPos(0, 30);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch (curChar) {
            case 79:
            case 111:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_1(1, 28, 6);
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    private final int jjMoveNfa_1(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 7;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xfffffffeffffffffL & l) != 0L) {
                                if (kind > 32)
                                    kind = 32;
                                jjCheckNAdd(6);
                            }
                            if ((0x100002600L & l) != 0L) {
                                if (kind > 12)
                                    kind = 12;
                            } else if (curChar == 34)
                                jjCheckNAddTwoStates(2, 4);
                            break;
                        case 1:
                            if (curChar == 34)
                                jjCheckNAddTwoStates(2, 4);
                            break;
                        case 2:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddStates(77, 79);
                            break;
                        case 3:
                            if (curChar == 34)
                                jjCheckNAddStates(77, 79);
                            break;
                        case 5:
                            if (curChar == 34 && kind > 31)
                                kind = 31;
                            break;
                        case 6:
                            if ((0xfffffffeffffffffL & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAdd(6);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                        case 6:
                            if ((0xdfffffffdfffffffL & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAdd(6);
                            break;
                        case 2:
                            jjAddStates(77, 79);
                            break;
                        case 4:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                if (kind > 12)
                                    kind = 12;
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 32)
                                    kind = 32;
                                jjCheckNAdd(6);
                            }
                            break;
                        case 2:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                jjAddStates(77, 79);
                            break;
                        case 6:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAdd(6);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {67, 69, 70, 54, 55, 57, 2, 3, 5, 6, 39, 43, 44, 8, 9, 10, 11, 20, 21, 12, 13, 17, 27, 28, 15, 16, 10, 11, 18, 19, 20, 21,
            24, 18, 19, 24, 22, 11, 23, 20, 29, 35, 36, 37, 30, 35, 36, 37, 40, 19, 11, 20, 21, 41, 40, 19, 41, 45, 50, 51, 52, 46, 50, 51, 52, 63, 64, 29, 30,
            31, 33, 45, 46, 47, 48, 0, 1, 2, 4, 5,};

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 48:
                return ((jjbitVec0[i2] & l2) != 0L);
            default:
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec3[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec4[i2] & l2) != 0L);
            default:
                if ((jjbitVec1[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec3[i2] & l2) != 0L);
            default:
                if ((jjbitVec4[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    public static final String[] jjstrLiteralImages = {"", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            "\50", "\51", "\72", "\136", null, null, null, null, "\133", "\173", null, null, "\135", "\175", null, null,};
    public static final String[] lexStateNames = {"Boost", "Range", "DEFAULT",};
    public static final int[] jjnewLexState = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 1, 1, 2, -1,
            2, 2, -1, -1,};
    static final long[] jjtoToken = {0x1ffffe001L,};
    static final long[] jjtoSkip = {0x1000L,};
    protected CharStream input_stream;
    private final int[] jjrounds = new int[71];
    private final int[] jjstateSet = new int[142];
    protected char curChar;

    public AccumuloSyntaxParserTokenManager(CharStream stream) {
        input_stream = stream;
    }

    public AccumuloSyntaxParserTokenManager(CharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(CharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 71; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(CharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 3 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 2;
    int defaultLexState = 2;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            switch (curLexState) {
                case 0:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    break;
                case 2:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();
                    break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    return matchedToken;
                } else {
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

}
